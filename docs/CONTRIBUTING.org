#+TITLE: Contributing to para-spacy-lisp
#+AUTHOR: aygp-dr
#+DATE: 2025-03-16
#+PROPERTY: header-args :mkdirp yes
#+OPTIONS: toc:2

* Contributing to para-spacy-lisp

Thank you for considering contributing to para-spacy-lisp! This document provides guidelines and instructions for contributing to the project.

** Code of Conduct

By participating in this project, you agree to abide by our Code of Conduct. Please be respectful, inclusive, and considerate in all interactions.

** How to Contribute

*** Getting Started

1. Fork the repository on GitHub
2. Clone your fork locally
   #+begin_src shell
   git clone https://github.com/YOUR-USERNAME/para-spacy-lisp.git
   cd para-spacy-lisp
   #+end_src
3. Set up your development environment
   #+begin_src shell
   ./setup.sh
   #+end_src

*** Development Process

1. Create a new branch for your feature or bug fix
   #+begin_src shell
   git checkout -b feature/your-feature-name
   #+end_src
2. Make your changes and test them thoroughly
3. Commit your changes using conventional commit messages
   #+begin_src shell
   git commit -m "feat(component): add new feature"
   #+end_src
4. Push your branch to your fork
   #+begin_src shell
   git push origin feature/your-feature-name
   #+end_src
5. Open a pull request against the main repository

** Coding Standards

*** Python Code

- Follow PEP 8 style guidelines
- Use type hints for function parameters and return values
- Write docstrings for all functions, classes, and modules
- Keep line length to a maximum of 88 characters
- Use meaningful variable and function names

*** Emacs Lisp Code

- Follow Emacs Lisp conventions
- Provide proper docstrings for all functions and variables
- Use 2-space indentation
- Use kebab-case for naming (e.g., =spacy-analyze-text=)

** Testing

- Write tests for new features and bug fixes
- Ensure all tests pass before submitting a pull request
- For Python code, use pytest:
  #+begin_src shell
  python -m pytest tests/
  #+end_src

** Documentation

- Update documentation for any changes to functionality
- Document new features in README.org and relevant .org files
- Use org-mode format for documentation

** Git Workflow

- Use feature branches for all changes
- Follow conventional commit messages:
  - feat: A new feature
  - fix: A bug fix
  - docs: Documentation changes
  - style: Formatting, missing semicolons, etc; no code change
  - refactor: Code change that neither fixes a bug nor adds a feature
  - test: Adding or modifying tests
  - chore: Changes to the build process or auxiliary tools

** Getting Help

If you need help or have questions, please:
- Open an issue on GitHub
- Reach out to the maintainers via email

Thank you for contributing to para-spacy-lisp!